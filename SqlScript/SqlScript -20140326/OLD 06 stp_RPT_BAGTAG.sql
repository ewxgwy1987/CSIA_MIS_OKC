GO
USE [BHSDB_OKC];
GO


ALTER PROCEDURE dbo.stp_RPT_OKC_BAGTAG
		  @SDO datetime 
		  -- ,@AIRLINE varchar(max)
		  --, @FLIGHTNUM varchar(max)
AS
BEGIN
	PRINT 'BAGTAG STORED PROCEDURE BEGIN';
	DECLARE @DATERANGE INT=1;

	SET @SDO = CONVERT(DATETIME,CONVERT(VARCHAR,@SDO,103),103);--ONLY DATE PART

	--Create temp table for final result
	CREATE TABLE #BT_BAG_TAG_TEMP 
	(
		GID BIGINT,
		LICENSE_PLATE VARCHAR(10),
		PAX_NAME VARCHAR(200),
		FLIGHT_NUMBER VARCHAR(5),
		AIRLINE VARCHAR(3),
		TAG_READ_TIME DATETIME,
		TAG_READ_LOCATION VARCHAR(20),
		BAG_TYPE VARCHAR(15),
		ALLOC_MU VARCHAR(10),
		SORTED_MU VARCHAR(10)
	);

	--1. Query the bags data from BSM into temp table #BT_BAG_SORTING_TEMP
	SELECT DISTINCT LICENSE_PLATE,GIVEN_NAME,SURNAME,OTHERS_NAME,FLIGHT_NUMBER,AIRLINE,SOURCE INTO #BT_BAG_SORTING_TEMP
	FROM 
	(
		SELECT LICENSE_PLATE,GIVEN_NAME,SURNAME,OTHERS_NAME,FLIGHT_NUMBER,AIRLINE,SOURCE
		FROM BAG_SORTING WITH(NOLOCK)
		WHERE SDO = @SDO 
			--AND AIRLINE IN (SELECT * FROM RPT_GETPARAMETERS(@AIRLINE)) 
			--AND FLIGHT_NUMBER IN (SELECT * FROM DBO.RPT_GETPARAMETERS(@FLIGHTNUM))
			
		UNION ALL
		SELECT LICENSE_PLATE,GIVEN_NAME,SURNAME,OTHERS_NAME,FLIGHT_NUMBER,AIRLINE,SOURCE
		FROM BAG_SORTING_HIS WITH(NOLOCK)
		WHERE SDO = @SDO 
			--AND AIRLINE IN (SELECT * FROM RPT_GETPARAMETERS(@AIRLINE)) 
			--AND FLIGHT_NUMBER IN (SELECT * FROM DBO.RPT_GETPARAMETERS(@FLIGHTNUM))
	) AS BAG_SORTING_ALL ;

	--2. Insert bags data into final table
	INSERT INTO #BT_BAG_TAG_TEMP
	SELECT NULL AS GID, LICENSE_PLATE, (ISNULL(GIVEN_NAME,'')+' '+ISNULL(SURNAME,'')+' '+ISNULL(OTHERS_NAME,'')) AS PAX_NAME,
		   FLIGHT_NUMBER,AIRLINE,
		   NULL AS TAG_READ_TIME,'' AS TAG_READ_LOCATION,
		   CASE SOURCE
		   WHEN 'L' THEN 'outbound'
		   WHEN 'T' THEN 'transfer'
		   WHEN 'A' THEN 'inbound'
		   ELSE ''
		   END AS BAG_TYPE,
		   '' AS ALLOC_MU,'' AS SORTED_MU,'' AS LATE_FLTNUM
	FROM #BT_BAG_SORTING_TEMP

	CREATE INDEX #BT_BAG_TAG_TEMP_IDXLP ON #BT_BAG_TAG_TEMP(LICENSE_PLATE);

	--3. Query the ATR read info into temp table #BT_ITEM_TAGREAD_TEMP
	SELECT ISC.GID, ISC.LICENSE_PLATE1, ISC.LICENSE_PLATE2, ISC.LOCATION, ISC.TIME_STAMP INTO #BT_ITEM_TAGREAD_TEMP
	FROM ITEM_SCANNED ISC, #BT_BAG_TAG_TEMP BTT WITH(NOLOCK)
	WHERE (ISC.LICENSE_PLATE1=BTT.LICENSE_PLATE OR ISC.LICENSE_PLATE2=BTT.LICENSE_PLATE)
		AND ISC.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@SDO) AND DATEADD(DAY,@DATERANGE,@SDO)
		AND (ISC.STATUS_TYPE='1' OR ISC.STATUS_TYPE='3' OR ISC.STATUS_TYPE='7');
	--ORDER BY ISC.TIME_STAMP DESC; 

	--4. Query the MES read info into temp table #BT_ITEM_TAGREAD_TEMP 
	INSERT INTO #BT_ITEM_TAGREAD_TEMP
	SELECT IER.GID,IER.LICENSE_PLATE AS LICENSE_PLATE1,'0000000000' AS LICENSE_PLATE2,IER.LOCATION,IER.TIME_STAMP 
	FROM ITEM_ENCODING_REQUEST IER,#BT_BAG_TAG_TEMP BTT WITH(NOLOCK)
	WHERE IER.LICENSE_PLATE=BTT.LICENSE_PLATE
		AND IER.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@SDO) AND DATEADD(DAY,@DATERANGE,@SDO)

	--5. In Oklahoma project, there are 1 ATR and 1 MES which a bag may goes through. 
	--So stored procedure must find the lastest location where item_scanned telegram is sent ordered by time_stamp
	DECLARE @TAGREAD_TABLE AS TAGREAD_TABLETYPE; --For the parameter of stp_RPT_GET_LATEST_TAGREAD

	INSERT INTO @TAGREAD_TABLE
	SELECT * FROM #BT_ITEM_TAGREAD_TEMP;

	CREATE TABLE #BT_TAGREAD_TEMP
	( 
		GID VARCHAR(10),
		LICENSE_PLATE1 VARCHAR(10), 
		LICENSE_PLATE2 VARCHAR(10), 
		LOCATION VARCHAR(20), 
		TIME_STAMP DATETIME
	);

	INSERT INTO #BT_TAGREAD_TEMP
	EXEC dbo.stp_RPT_GET_LATEST_TAGREAD @TAGREAD_TABLE;

	--SELECT GID, LICENSE_PLATE1, LICENSE_PLATE2, LOCATION, TIME_STAMP INTO #BT_TAGREAD_TEMP
	--FROM #BT_ITEM_TAGREAD_TEMP
	--ORDER BY TIME_STAMP DESC;

	CREATE INDEX #BT_TAGREAD_TEMP_IDXLP ON #BT_TAGREAD_TEMP(LICENSE_PLATE1);
	--CREATE INDEX #BT_TAGREAD_TEMP_IDXGID ON #BT_TAGREAD_TEMP(LICENSE_PLATE2);

	--5. Update ATR OR MES read info(GID,TAG_READ_TIME,TAG_READ_LOCATION) into final table
	UPDATE BTT
	SET BTT.GID=ITT.GID,BTT.TAG_READ_TIME=ITT.TIME_STAMP,BTT.TAG_READ_LOCATION=LOC.LOCATION
	FROM #BT_TAGREAD_TEMP ITT, #BT_BAG_TAG_TEMP BTT, LOCATIONS LOC
	WHERE (ITT.LICENSE_PLATE1=BTT.LICENSE_PLATE OR ITT.LICENSE_PLATE2=BTT.LICENSE_PLATE)
		AND ITT.LOCATION=LOC.LOCATION_ID

	CREATE INDEX #BT_BAG_TAG_TEMP_IDXGID ON #BT_BAG_TAG_TEMP(GID);

	--6. Update Flight Allocation Make-up carousel(ALLOC_MU) into final table
	UPDATE BTT
	SET BTT.ALLOC_MU=FPA.RESOURCE
	FROM FLIGHT_PLAN_ALLOC FPA, #BT_BAG_TAG_TEMP BTT WITH(NOLOCK)
	WHERE FPA.AIRLINE=BTT.AIRLINE AND FPA.FLIGHT_NUMBER=BTT.FLIGHT_NUMBER
		AND FPA.SDO=@SDO;

	--7. Update sorted MU(SORTED_MU) into final table
	UPDATE BTT
	SET BTT.SORTED_MU=LOC.LOCATION
	FROM ITEM_PROCEEDED IPR, LOCATIONS LOC,#BT_BAG_TAG_TEMP BTT WITH(NOLOCK)
	WHERE IPR.GID=BTT.GID AND BTT.GID IS NOT NULL
		AND IPR.PROCEED_LOCATION = LOC.LOCATION_ID
		AND LOC.SUBSYSTEM LIKE 'MU%'
		AND IPR.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@SDO) AND DATEADD(DAY,@DATERANGE,@SDO);

	--Update Secondary Flight if bag misses the first flight(LATE_FLTNUM) into final table
	----
	----
	----


	SELECT	*
	FROM	#BT_BAG_TAG_TEMP
	WHERE GID IS NOT NULL;
	
END;


--DECLARE @SDO datetime='2014-1-2';
--DECLARE @AIRLINE varchar(max)='DL';
--DECLARE @FLIGHTNUM varchar(max)='0006';
--EXEC stp_RPT01_BAGTAG_GWYTEST @SDO;