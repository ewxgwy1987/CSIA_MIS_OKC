GO
USE [BHSDB];
GO


ALTER PROCEDURE dbo.stp_RPT16_FlightSummary_GWYTEST
		  @DTFROM datetime , 
		  @DTTO datetime
		  --@AIRLINE varchar(max) , 
		  --@FLIGHTNUM varchar(max)
AS
BEGIN
	PRINT 'BAGTAG STORED PROCEDURE BEGIN';
	DECLARE @DATERANGE INT=1;

	--Create temp table for final result
	CREATE TABLE #FS_FLIGHTSUMMARY_TEMP 
	(
		FLIGHT_NUMBER VARCHAR(5),
		AIRLINE VARCHAR(3),
		BAG_TYPE VARCHAR(1),
		NUMBER_ALLBAGS INT,
		NUMBER_BAGS_ONTIME INT,
		NUMBER_BAGS_LATE INT
	);

	CREATE TABLE #FS_BAGSDETAIL_TEMP
	(
		AIRLINE varchar(3),
		FLIGHT_NUMBER varchar(5),
		SDO datetime,
		SOURCE varchar(1),
		BSM_TIME_STAMP datetime,
		CLOSEOUT_TIME datetime,
		LICENSE_PLATE varchar(10),
		LASTEST_GID varchar(10),
		SORTED_MARK int, -- Indicate whether this bag is sorted
		SORTED_TIMESTAMP datetime,-- Indicate when this bag is sorted
		SORTED_ONTIME_MARK int, -- Indicate whether this bag is sorted on time
		BAG_LATE_MARK int -- Indicate whether this bag is sorted late BY IRD
	);

	--1. Query flight info that its STO is between @DTFROM and @DTTO
	SELECT FPS.AIRLINE,FPS.FLIGHT_NUMBER,FPS.SDO,FPS.STO,FPS.EDO,FPS.ETO,FPA.ALLOC_CLOSE_OFFSET,FPA.ALLOC_CLOSE_RELATED
	INTO #FS_FLIGHT_PLAN_ALLOC_TEMP
	FROM FLIGHT_PLAN_SORTING FPS WITH(NOLOCK)
	LEFT JOIN FLIGHT_PLAN_ALLOC FPA WITH(NOLOCK)
	ON	FPS.AIRLINE=FPA.AIRLINE AND FPS.FLIGHT_NUMBER=FPA.FLIGHT_NUMBER AND FPS.SDO=FPA.SDO
		AND CONVERT(datetime,CONVERT(VARCHAR,fpa.SDO,103)+' '+DBO.RPT_GETFORMATTEDSTO(fpa.STO),103) BETWEEN @DTFROM AND @DTTO
		AND FPA.TIME_STAMP=(SELECT MAX(TIME_STAMP) 
							FROM FLIGHT_PLAN_ALLOC FPA2 WITH(NOLOCK)
							WHERE FPA2.AIRLINE=FPA.AIRLINE 
								AND FPA2.FLIGHT_NUMBER=FPA.FLIGHT_NUMBER 
								AND FPA2.SDO=FPA.SDO
						   )
	WHERE CONVERT(datetime,CONVERT(VARCHAR,FPS.SDO,103)+' '+DBO.RPT_GETFORMATTEDSTO(FPS.STO),103) BETWEEN @DTFROM AND @DTTO;
	
	--SELECT * FROM #FS_FLIGHT_PLAN_ALLOC_TEMP;

	--2. Insert into all bags detail from bag_sorting to #FS_BAGSDETAIL_TEMP
	INSERT INTO #FS_BAGSDETAIL_TEMP
	SELECT DISTINCT BSA.AIRLINE, BSA.FLIGHT_NUMBER, BSA.SDO, SOURCE, BSA.TIME_STAMP AS BSM_TIME_STAMP, 
		CASE FPA.ALLOC_CLOSE_RELATED
			WHEN 'ETD' 
				THEN CONVERT(DATETIME,CONVERT(VARCHAR,FPA.EDO,103) + ' ' + DBO.RPT_GETFORMATTEDSTO(dbo.SAC_OFFSETOPERATOR(FPA.ETO,FPA.ALLOC_CLOSE_OFFSET)),103)
			WHEN 'STD' 
				THEN CONVERT(DATETIME,CONVERT(VARCHAR,FPA.SDO,103) + ' ' + DBO.RPT_GETFORMATTEDSTO(dbo.SAC_OFFSETOPERATOR(FPA.STO,FPA.ALLOC_CLOSE_OFFSET)),103)
		END AS CLOSEOUT_TIME, 
		LICENSE_PLATE, '' AS LASTEST_GID, 0 AS SORTED_MARK, NULL AS SORTED_TIMESTAMP, 0 AS SORTED_ONTIME_MARK, 0 AS BAG_LATE_MARK
	FROM 
	(
		SELECT AIRLINE, FLIGHT_NUMBER, SDO, SOURCE, TIME_STAMP, LICENSE_PLATE
		FROM BAG_SORTING WITH(NOLOCK)
		WHERE SDO BETWEEN DATEADD(DAY,-@DATERANGE,@DTFROM) AND DATEADD(DAY,@DATERANGE,@DTTO)			
		UNION ALL
		SELECT AIRLINE, FLIGHT_NUMBER, SDO, SOURCE, TIME_STAMP, LICENSE_PLATE
		FROM BAG_SORTING_HIS WITH(NOLOCK)
		WHERE SDO BETWEEN DATEADD(DAY,-@DATERANGE,@DTFROM) AND DATEADD(DAY,@DATERANGE,@DTTO)	

	) AS BSA, #FS_FLIGHT_PLAN_ALLOC_TEMP FPA
	WHERE BSA.AIRLINE=FPA.AIRLINE AND BSA.FLIGHT_NUMBER=FPA.FLIGHT_NUMBER AND BSA.SDO=FPA.SDO;

	CREATE INDEX #FS_BAGSDETAIL_TEMP_IDXLP ON #FS_BAGSDETAIL_TEMP(LICENSE_PLATE);

	--SELECT * FROM #FS_BAGSDETAIL_TEMP;

	--3. Query the ATR read info into temp table #BT_ITEM_TAGREAD_TEMP
	SELECT ISC.GID, ISC.LICENSE_PLATE1, ISC.LICENSE_PLATE2, ISC.LOCATION, ISC.TIME_STAMP INTO #FS_ITEM_TAGREAD_TEMP
	FROM ITEM_SCANNED ISC, #FS_BAGSDETAIL_TEMP FBD WITH(NOLOCK)
	WHERE (ISC.LICENSE_PLATE1=FBD.LICENSE_PLATE OR ISC.LICENSE_PLATE2=FBD.LICENSE_PLATE)
		AND ISC.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFROM) AND DATEADD(DAY,@DATERANGE,@DTTO)
		AND (ISC.STATUS_TYPE='1' OR ISC.STATUS_TYPE='3' OR ISC.STATUS_TYPE='7');
	--ORDER BY ISC.TIME_STAMP DESC; 

	--4. Query the MES read info into temp table #BT_ITEM_TAGREAD_TEMP 
	INSERT INTO #FS_ITEM_TAGREAD_TEMP
	SELECT IER.GID,IER.LICENSE_PLATE AS LICENSE_PLATE1,'0000000000' AS LICENSE_PLATE2,IER.LOCATION,IER.TIME_STAMP 
	FROM ITEM_ENCODING_REQUEST IER,#FS_BAGSDETAIL_TEMP FBD WITH(NOLOCK)
	WHERE IER.LICENSE_PLATE=FBD.LICENSE_PLATE
		AND IER.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFROM) AND DATEADD(DAY,@DATERANGE,@DTTO)

	--In Charlotte project, there are 2 ATRs and MES a bag may goes through. 
	--So stored procedure must find the lastest location where item_scanned telegram is sent ordered by time_stamp
	--SELECT GID, LICENSE_PLATE1, LICENSE_PLATE2, LOCATION, MAX(TIME_STAMP) AS TIME_STAMP INTO #FS_TAGREAD_TEMP
	--FROM #FS_ITEM_TAGREAD_TEMP
	--GROUP BY GID, LICENSE_PLATE1, LICENSE_PLATE2, LOCATION;

	DECLARE @TAGREAD_TABLE AS TAGREAD_TABLETYPE; --For the parameter of stp_RPT_GET_LATEST_TAGREAD

	INSERT INTO @TAGREAD_TABLE
	SELECT * FROM #FS_ITEM_TAGREAD_TEMP;

	CREATE TABLE #FS_TAGREAD_TEMP
	( 
		GID VARCHAR(10),
		LICENSE_PLATE1 VARCHAR(10), 
		LICENSE_PLATE2 VARCHAR(10), 
		LOCATION VARCHAR(20), 
		TIME_STAMP DATETIME
	);

	INSERT INTO #FS_TAGREAD_TEMP
	EXEC dbo.stp_RPT_GET_LATEST_TAGREAD @TAGREAD_TABLE;

	CREATE INDEX #FS_TAGREAD_TEMP_IDXLP1 ON #FS_TAGREAD_TEMP(LICENSE_PLATE1);
	--CREATE INDEX #FS_TAGREAD_TEMP_IDXLP2 ON #FS_TAGREAD_TEMP(LICENSE_PLATE2);

	------------------ Commented by Guo Wenyu 2014/01/02 -------------------------

	--Because the bag on-time or late definition is confirmed.
	--Their definition is from comparison between item_scanned.time_stamp and close-time
	--Not between item_proceeded.time_stamp and close-time (original my codes)

	----5. Update ATR OR MES read info(Latest GID) into #FS_BAGSDETAIL_TEMP
	--UPDATE FBT
	--SET FBT.LASTEST_GID=FTT.GID
	--FROM #FS_TAGREAD_TEMP FTT, #FS_BAGSDETAIL_TEMP FBT
	--WHERE FTT.LICENSE_PLATE1=FBT.LICENSE_PLATE OR FTT.LICENSE_PLATE2=FBT.LICENSE_PLATE

	----6. Update sorted info (SORTED_MARK, SORTED_TIMESTAMP, SORTED_ONTIME_MARK) into #FS_BAGSDETAIL_TEMP
	--UPDATE FBT
	--SET FBT.SORTED_MARK=1, FBT.SORTED_TIMESTAMP=IPR.TIME_STAMP,
	--	FBT.SORTED_ONTIME_MARK=
	--	CASE
	--		WHEN IPR.TIME_STAMP<=FBT.CLOSEOUT_TIME THEN 1
	--		ELSE 0
	--	END
	--FROM ITEM_PROCEEDED IPR, LOCATIONS LOC,#FS_BAGSDETAIL_TEMP FBT WITH(NOLOCK)
	--WHERE IPR.GID=FBT.LASTEST_GID AND FBT.LASTEST_GID IS NOT NULL
	--	AND IPR.PROCEED_LOCATION = LOC.LOCATION_ID
	--	AND LOC.SUBSYSTEM LIKE 'MU%'
	--	AND IPR.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFROM) AND DATEADD(DAY,@DATERANGE,@DTTO);

	----7. Update bag late mark(BAG_LATE_MARK) into #FS_BAGSDETAIL_TEMP
	--UPDATE FBT
	--SET FBT.BAG_LATE_MARK=1
	--FROM ITEM_REDIRECT IRD, #FS_BAGSDETAIL_TEMP FBT WITH(NOLOCK)
	--WHERE IRD.GID=FBT.LASTEST_GID AND FBT.LASTEST_GID IS NOT NULL
	--	AND IRD.REASON='5'--TOO LATE
	--	AND IRD.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFrom) AND DATEADD(DAY,@DATERANGE,@DTTo);

	------------------END Commented by Guo Wenyu 2014/01/02 END-------------------------

	--New definition of bag on-time and late
	--6. Update ATR OR MES read info(Latest GID) into #FS_BAGSDETAIL_TEMP
	UPDATE	FBT
	SET		FBT.LASTEST_GID=TGR.GID,
			FBT.SORTED_MARK=1,
			FBT.SORTED_TIMESTAMP=TGR.TIME_STAMP,
			FBT.SORTED_ONTIME_MARK=
			CASE
				WHEN TGR.TIME_STAMP<FBT.CLOSEOUT_TIME THEN 1
				ELSE 0
			END,
			FBT.BAG_LATE_MARK=
			CASE
				WHEN TGR.TIME_STAMP>=FBT.CLOSEOUT_TIME THEN 1
				ELSE 0
			END
	FROM #FS_TAGREAD_TEMP TGR, #FS_BAGSDETAIL_TEMP FBT
	WHERE TGR.LICENSE_PLATE1=FBT.LICENSE_PLATE OR TGR.LICENSE_PLATE2=FBT.LICENSE_PLATE

	

	--8. Finally, get the statistic result
	INSERT INTO #FS_FLIGHTSUMMARY_TEMP
	SELECT DISTINCT FLIGHT_NUMBER,AIRLINE,NULL AS BAG_TYPE, 0 AS NUMBER_ALLBAGS, 0 AS NUMBER_BAGS_ONTIME,0 AS NUMBER_BAGS_LATE
	FROM FLIGHT_PLAN_SORTING FPS WITH(NOLOCK)
	WHERE CONVERT(datetime,CONVERT(VARCHAR,FPS.SDO,103)+' '+DBO.RPT_GETFORMATTEDSTO(FPS.STO),103) BETWEEN @DTFROM AND @DTTO;

	UPDATE	FLTSUM
	SET		FLTSUM.BAG_TYPE=FLTSTC.BAG_TYPE,
			FLTSUM.NUMBER_ALLBAGS=FLTSTC.NUMBER_ALLBAGS,
			FLTSUM.NUMBER_BAGS_ONTIME=FLTSTC.NUMBER_BAGS_ONTIME,
			FLTSUM.NUMBER_BAGS_LATE=FLTSTC.NUMBER_BAGS_LATE
	FROM	(SELECT	FLIGHT_NUMBER, AIRLINE,
				CASE SOURCE
					WHEN 'L' THEN 'O'
					WHEN 'T' THEN 'X'
					WHEN 'A' THEN 'T'
					ELSE ''
				END AS BAG_TYPE,count(LICENSE_PLATE) AS NUMBER_ALLBAGS,SUM(SORTED_ONTIME_MARK) AS NUMBER_BAGS_ONTIME, SUM(BAG_LATE_MARK) AS NUMBER_BAGS_LATE
			FROM #FS_BAGSDETAIL_TEMP FBT
			GROUP BY FBT.FLIGHT_NUMBER,FBT.AIRLINE,FBT.SOURCE
			) AS FLTSTC
			,#FS_FLIGHTSUMMARY_TEMP FLTSUM
	WHERE	FLTSUM.AIRLINE=FLTSTC.AIRLINE AND FLTSUM.FLIGHT_NUMBER=FLTSTC.FLIGHT_NUMBER;

	SELECT * FROM #FS_FLIGHTSUMMARY_TEMP;
END

--DECLARE @DTFROM DATETIME='2014-1-1';
--DECLARE @DTTO DATETIME='2014-1-3';
--EXEC stp_RPT16_FlightSummary_GWYTEST @DTFROM,@DTTO;
