GO
USE [BHSDB];
GO


ALTER PROCEDURE dbo.stp_RPT_OKC_BSM
		  @DTFROM DATETIME , 
		  @DTTO DATETIME,
		  @AIRLINE varchar(max) , 
		  @FLIGHTNUM varchar(max)
AS
BEGIN
	-- NOTE: BSM report is based on all license plates from BSM
	-- The tags which do not have matched BSM data will not shown in this report
	DECLARE @DATERANGE INT=1;

	--Create temp table for final result
	CREATE TABLE #BSM_BAG_BSM_TEMP 
	(
		GID BIGINT,
		LICENSE_PLATE VARCHAR(10),
		PAX_NAME VARCHAR(200),
		FLIGHT_NUMBER VARCHAR(5),
		AIRLINE VARCHAR(3),
		TAG_READ_TIME DATETIME,
		TAG_READ_LOCATION VARCHAR(20),
		BAG_TYPE VARCHAR(15),
		BSM_RECD_TIME DATETIME,
		TAG_PRINT_TIME DATETIME,
		BAG_LATE_STATUS VARCHAR(8)
	);

	--1. Query the bags data from BSM
	SELECT DISTINCT LICENSE_PLATE,GIVEN_NAME,SURNAME,OTHERS_NAME,FLIGHT_NUMBER,AIRLINE,SOURCE,BSM_RECD_TIME,TAG_PRINT_TIME INTO #BSM_BAG_SORTING_TEMP
	FROM 
	(
		SELECT LICENSE_PLATE,GIVEN_NAME,SURNAME,OTHERS_NAME,FLIGHT_NUMBER,AIRLINE,SOURCE,TIME_STAMP AS BSM_RECD_TIME,CHECK_IN_TIME_STAMP AS TAG_PRINT_TIME
		FROM BAG_SORTING WITH(NOLOCK)
		WHERE SDO BETWEEN DATEADD(DAY,-@DATERANGE, @DTFrom) AND DATEADD(DAY,@DATERANGE, @DTTo)	
			AND AIRLINE IN (SELECT * FROM RPT_GETPARAMETERS(@AIRLINE)) 
			AND FLIGHT_NUMBER IN (SELECT * FROM DBO.RPT_GETPARAMETERS(@FLIGHTNUM))
			
		UNION ALL
		SELECT LICENSE_PLATE,GIVEN_NAME,SURNAME,OTHERS_NAME,FLIGHT_NUMBER,AIRLINE,SOURCE,TIME_STAMP AS BSM_RECD_TIME,CHECK_IN_TIME_STAMP AS TAG_PRINT_TIME
		FROM BAG_SORTING_HIS WITH(NOLOCK)
		WHERE SDO BETWEEN DATEADD(DAY,-@DATERANGE, @DTFrom) AND DATEADD(DAY,@DATERANGE, @DTTo) 
			AND AIRLINE IN (SELECT * FROM RPT_GETPARAMETERS(@AIRLINE)) 
			AND FLIGHT_NUMBER IN (SELECT * FROM DBO.RPT_GETPARAMETERS(@FLIGHTNUM))
	) AS BAG_SORTING_ALL ;


	--2. Insert bags data into final table
	INSERT INTO #BSM_BAG_BSM_TEMP
	SELECT NULL AS GID, LICENSE_PLATE, (ISNULL(GIVEN_NAME,'')+' '+ISNULL(SURNAME,'')+' '+ISNULL(OTHERS_NAME,'')) AS PAX_NAME,
		   FLIGHT_NUMBER,AIRLINE, NULL AS TAG_READ_TIME, '' AS TAG_READ_LOCATION,
		   CASE SOURCE
			   WHEN 'L' THEN 'outbound'
			   WHEN 'T' THEN 'transfer'
			   WHEN 'A' THEN 'inbound'
			   ELSE 'N/A'
		   END AS BAG_TYPE,
		   BSM_RECD_TIME,TAG_PRINT_TIME,'' AS BAG_LATE_STATUS
	FROM #BSM_BAG_SORTING_TEMP

	CREATE INDEX #BSM_BAG_BSM_TEMP_IDXLP ON #BSM_BAG_BSM_TEMP(LICENSE_PLATE);


	--3. Query the ATR read info into temp table #BT_ITEM_TAGREAD_TEMP
	SELECT ISC.GID, ISC.LICENSE_PLATE1, ISC.LICENSE_PLATE2, ISC.LOCATION, ISC.TIME_STAMP INTO #BT_ITEM_TAGREAD_TEMP
	FROM ITEM_SCANNED ISC, #BSM_BAG_BSM_TEMP BBT WITH(NOLOCK)
	WHERE (ISC.LICENSE_PLATE1=BBT.LICENSE_PLATE OR ISC.LICENSE_PLATE2=BBT.LICENSE_PLATE)
		AND ISC.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFrom) AND DATEADD(DAY,@DATERANGE,@DTTo)
		AND (ISC.STATUS_TYPE='1' OR ISC.STATUS_TYPE='3' OR ISC.STATUS_TYPE='7')

	--4. Query the MES read info into temp table #BT_ITEM_TAGREAD_TEMP 
	INSERT INTO #BT_ITEM_TAGREAD_TEMP
	SELECT IEC.GID,IEC.LICENSE_PLATE AS LICENSE_PLATE1,'0000000000' AS LICENSE_PLATE2,IEC.LOCATION,IEC.TIME_STAMP 
	FROM ITEM_ENCODED IEC,#BSM_BAG_BSM_TEMP BBT WITH(NOLOCK)
	WHERE IEC.LICENSE_PLATE=BBT.LICENSE_PLATE
		AND IEC.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFrom) AND DATEADD(DAY,@DATERANGE,@DTTo)
	UNION
	SELECT IRM.GID,IRM.LICENSE_PLATE AS LICENSE_PLATE1,'0000000000' AS LICENSE_PLATE2,IRM.LOCATION,IRM.TIME_STAMP 
	FROM ITEM_REMOVED IRM,#BSM_BAG_BSM_TEMP BBT WITH(NOLOCK)
	WHERE IRM.LICENSE_PLATE=BBT.LICENSE_PLATE
		AND IRM.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFROM) AND DATEADD(DAY,@DATERANGE,@DTTO)

	--In Charlotte project, there are 2 ATRs and MES a bag may goes through. 
	--So stored procedure must find the lastest location where item_scanned telegram is sent ordered by time_stamp

	DECLARE @TAGREAD_TABLE AS TAGREAD_TABLETYPE; --For the parameter of stp_RPT_GET_LATEST_TAGREAD

	INSERT INTO @TAGREAD_TABLE
	SELECT * FROM #BT_ITEM_TAGREAD_TEMP;

	CREATE TABLE #BT_TAGREAD_TEMP
	( 
		GID VARCHAR(10),
		LICENSE_PLATE VARCHAR(10), 
		LOCATION VARCHAR(20), 
		TIME_STAMP DATETIME
	);

	INSERT INTO #BT_TAGREAD_TEMP
	EXEC dbo.stp_RPT_GET_LATEST_TAGREAD @TAGREAD_TABLE;

	CREATE INDEX #BT_TAGREAD_TEMP_IDXLP ON #BT_TAGREAD_TEMP(LICENSE_PLATE);
	--CREATE INDEX #BT_TAGREAD_TEMP_IDXGID ON #BT_TAGREAD_TEMP(LICENSE_PLATE2);

	--select * from #BT_TAGREAD_TEMP;

	--5. Update ATR OR MES read info(GID,TAG_READ_TIME,TAG_READ_LOCATION) into final table
	UPDATE BBT
	SET BBT.GID=BTT.GID,BBT.TAG_READ_TIME=BTT.TIME_STAMP,BBT.TAG_READ_LOCATION=LOC.LOCATION
	FROM #BT_TAGREAD_TEMP BTT, #BSM_BAG_BSM_TEMP BBT, LOCATIONS LOC
	WHERE BTT.LICENSE_PLATE=BBT.LICENSE_PLATE
		AND BTT.LOCATION=LOC.LOCATION_ID 

	CREATE INDEX #BSM_BAG_BSM_TEMP_IDXGID ON #BSM_BAG_BSM_TEMP(GID);

	
	--6. Update BAG late status(BAG_LATE_STATUS) into final table
	UPDATE BBT
	SET BBT.BAG_LATE_STATUS='YES'
	FROM ITEM_REDIRECT IRD, #BSM_BAG_BSM_TEMP BBT WITH(NOLOCK)
	WHERE IRD.GID=BBT.GID AND BBT.GID IS NOT NULL
		AND IRD.REASON='5'--TOO LATE
		AND IRD.TIME_STAMP BETWEEN DATEADD(DAY,-@DATERANGE,@DTFrom) AND DATEADD(DAY,@DATERANGE,@DTTo);

	UPDATE BBT
	SET BBT.BAG_LATE_STATUS='NO'
	FROM #BSM_BAG_BSM_TEMP BBT
	WHERE BBT.BAG_LATE_STATUS != 'YES';
	

	SELECT * FROM #BSM_BAG_BSM_TEMP;
	
END;

--DECLARE @DTFROM datetime='2014-01-01';
--DECLARE @DTTO datetime='2014-01-02';
--DECLARE @AIRLINE varchar(max)='DL,UA,EK';
--DECLARE @FLIGHTNUM varchar(max)='1234,8888,5555,1113';
--EXEC stp_RPT19_BSM_GWYTEST @DTFROM,@DTTO,@AIRLINE,@FLIGHTNUM;
