GO
USE [BHSDB];
GO

ALTER PROCEDURE dbo.stp_RPT_OKC_CRITICALTRACKINGPEC
	@DTFrom DATETIME,
	@DTTo DATETIME
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @HOURRANGE INT=1;
	DECLARE @msgEnter varchar(50)
	DECLARE @msgExit varchar (50)

	set @msgEnter = 'Entering EDS at'
	set @msgExit = 'Exited from EDS at'

	SELECT DISTINCT ITI.GID,
		CASE
			WHEN ISC.LICENSE_PLATE1 LIKE '0%' AND ISC.LICENSE_PLATE1<>'0000000000' AND ISC.LICENSE_PLATE1<>'999999999' AND LEN(LICENSE_PLATE1)=10
				THEN ISC.LICENSE_PLATE1
			WHEN ISC.LICENSE_PLATE2 LIKE '0%' AND ISC.LICENSE_PLATE2<>'0000000000' AND ISC.LICENSE_PLATE2<>'999999999' AND LEN(LICENSE_PLATE1)=10
				THEN ISC.LICENSE_PLATE2
			WHEN LEN(ISC.LICENSE_PLATE1)=10 AND ISC.LICENSE_PLATE1 LIKE '1%'
				THEN ISC.LICENSE_PLATE1 --NULL
			WHEN LEN(ISC.LICENSE_PLATE2)=10 AND ISC.LICENSE_PLATE2 LIKE '1%'
				THEN ISC.LICENSE_PLATE2 --NULL
			ELSE ITI.GID
		END AS LICENSE_PLATE
	INTO #CTP_GID2LPMAP_TEMP
	FROM (	SELECT GID FROM ITEM_TRACKING ITI,LOCATIONS LOC WITH(NOLOCK) 
			WHERE TIME_STAMP BETWEEN  @DTFrom AND @DTTo
				AND ITI.LOCATION=LOC.LOCATION_ID
				AND EXISTS(
								SELECT ELD.PRE_XM_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() ELD
								WHERE ELD.PRE_XM_LOCATION=LOC.LOCATION
								UNION
								SELECT POST_XM_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() ELD
								WHERE ELD.POST_XM_LOCATION=LOC.LOCATION
						  )
			UNION
			SELECT GID FROM ITEM_PROCEEDED IPR,LOCATIONS LOC WITH(NOLOCK) 
			WHERE TIME_STAMP BETWEEN  @DTFrom AND @DTTo
				AND IPR.LOCATION=LOC.LOCATION_ID
				AND EXISTS(
								SELECT DIVERT_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() ELD
								WHERE ELD.REJECT_LOCATION=LOC.LOCATION
								UNION
								SELECT DIVERT_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() ELD
								WHERE ELD.CLEAR_LOCATION=LOC.LOCATION
						  )
		 ) AS ITI
	LEFT JOIN ITEM_SCANNED ISC WITH(NOLOCK) 
		ON ITI.GID=ISC.GID
		AND ISC.TIME_STAMP BETWEEN  DATEADD(HOUR,-@HOURRANGE,@DTFrom) AND DATEADD(HOUR,@HOURRANGE,@DTTo);

	UPDATE #CTP_GID2LPMAP_TEMP
	SET LICENSE_PLATE=GID
	WHERE LICENSE_PLATE IS NULL;

	CREATE NONCLUSTERED INDEX #CTP_GID2LPMAP_TEMP_IDXGID ON #CTP_GID2LPMAP_TEMP(GID);
	CREATE NONCLUSTERED INDEX #CTP_GID2LPMAP_TEMP_IDXLP ON #CTP_GID2LPMAP_TEMP(LICENSE_PLATE);
	
	/**Upstream of Xray**/
	SELECT	G2L.LICENSE_PLATE, 
			--LOC.SUBSYSTEM AS SUBSYSTEM,
			(SELECT TOP 1 XRAY_ID FROM GET_RPT_EDS_LINE_DEVICE() WHERE SUBSYSTEM = LOC.SUBSYSTEM) AS XRAY_ID,
			@msgEnter +' '+ LOC.LOCATION AS ACT, 
			ITI.TIME_STAMP, 
			'Entered' AS XRAY_STAT
	FROM ITEM_TRACKING AS ITI, LOCATIONS LOC, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
	WHERE ITI.TIME_STAMP BETWEEN @DTFrom AND @DTTo 
		AND ITI.LOCATION=LOC.LOCATION_ID
		AND ITI.GID=G2L.GID
		AND EXISTS(
					SELECT PRE_XM_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() 
					WHERE SUBSYSTEM=LOC.SUBSYSTEM AND PRE_XM_LOCATION=LOC.LOCATION
				  )
		--AND (LOC.LOCATION IN('SS1-06','SS2-06','SS3-06','SS4-06'))
	

	/**Downstream of Xray**/
	UNION ALL
	SELECT	G2L.LICENSE_PLATE, 
			--LOC.SUBSYSTEM AS SUBSYSTEM,
			(SELECT TOP 1 XRAY_ID FROM GET_RPT_EDS_LINE_DEVICE() WHERE SUBSYSTEM = LOC.SUBSYSTEM) AS XRAY_ID,
			@msgExit + ' '+ LOC.LOCATION AS ACT, 
			ITI.TIME_STAMP, 
			(	SELECT TOP 1 
					CASE 
						WHEN (ITI.TIME_STAMP < ICR.TIME_STAMP)OR (ICR_TYPE.DESCRIPTION) IS NULL 
							THEN '-'
						ELSE 
							(/*'Screen Level ' + ICR.SCREEN_LEVEL + CHAR(10) + CHAR(13) +*/ ICR_TYPE.DESCRIPTION) 
					END 
				FROM ITEM_SCREENED AS ICR WITH(NOLOCK)
				INNER JOIN ITEM_SCREEN_RESULT_TYPES AS ICR_TYPE ON ICR.RESULT_TYPE = ICR_TYPE.TYPE
				WHERE ICR.TIME_STAMP BETWEEN @DTFrom AND @DTTo
					AND ITI.GID = ICR.GID
				ORDER BY ICR.TIME_STAMP DESC
			) AS XRAY_STAT
		FROM ITEM_TRACKING AS ITI , LOCATIONS LOC, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
		WHERE ITI.TIME_STAMP BETWEEN @DTFrom AND @DTTo
			AND ITI.LOCATION=LOC.LOCATION_ID
			AND ITI.GID=G2L.GID
			AND EXISTS(
						SELECT POST_XM_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() 
						WHERE SUBSYSTEM=LOC.SUBSYSTEM AND POST_XM_LOCATION=LOC.LOCATION
					  )
			--AND LOC.LOCATION IN ('SS1-EXT','SS2-EXT','SS3-EXT','SS4-EXT')
	
	
	/**After Divert Point**/
	UNION ALL
	SELECT	G2L2.LICENSE_PLATE AS LICENSE_PLATE, ALLIPR.XRAY_ID, ALLIPR.ACT,
			ALLIPR.TIME_STAMP, 
			(	SELECT TOP 1 
					CASE 
						WHEN (ALLIPR.TIME_STAMP < ICR.TIME_STAMP) OR (ICR_TYPE.DESCRIPTION) IS NULL 
							THEN '-' 
						ELSE 
							(/*'Screen Level ' + ICR.SCREEN_LEVEL + CHAR(10) + CHAR(13) +*/ ICR_TYPE.DESCRIPTION)
					END
				FROM ITEM_SCREENED AS ICR 
				INNER JOIN ITEM_SCREEN_RESULT_TYPES AS ICR_TYPE ON ICR.RESULT_TYPE = ICR_TYPE.TYPE
				WHERE (ICR.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (ICR.GID = ALLIPR.GID)
				ORDER BY ICR.TIME_STAMP
			) AS XRAY_STAT
	FROM (
			SELECT IPR.GID,ELD.XRAY_ID,'At Divert Point: '+ ELD.DIVERT_LOCATION + CHAR(10) + CHAR(13) +'Diverted to ' + ELD.DIVERT_RJT_LOC AS ACT,IPR.TIME_STAMP
			FROM ITEM_PROCEEDED AS IPR , LOCATIONS LOC, LOCATIONS PRD_LOC, GET_RPT_EDS_LINE_DEVICE() ELD, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
			WHERE IPR.GID=G2L.GID AND IPR.LOCATION=LOC.LOCATION_ID AND IPR.PROCEED_LOCATION=PRD_LOC.LOCATION_ID
				AND ELD.REJECT_LOCATION=LOC.LOCATION AND ELD.REJECT_LOCATION_TO=PRD_LOC.LOCATION
				AND IPR.TIME_STAMP BETWEEN @DTFrom AND @DTTo
			UNION
			SELECT IPR.GID,ELD.XRAY_ID,'At Divert Point: '+ ELD.DIVERT_LOCATION + CHAR(10) + CHAR(13) +'Diverted to ' + ELD.DIVERT_CLT_LOC AS ACT,IPR.TIME_STAMP
			FROM ITEM_PROCEEDED AS IPR , LOCATIONS LOC, LOCATIONS PRD_LOC, GET_RPT_EDS_LINE_DEVICE() ELD, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
			WHERE IPR.GID=G2L.GID AND IPR.LOCATION=LOC.LOCATION_ID AND IPR.PROCEED_LOCATION=PRD_LOC.LOCATION_ID
				AND ELD.CLEAR_LOCATION=LOC.LOCATION AND ELD.CLEAR_LOCATION_TO=PRD_LOC.LOCATION
				AND IPR.TIME_STAMP BETWEEN @DTFrom AND @DTTo
			UNION
			SELECT IPR.GID,ELD.XRAY_ID,'At Divert Point: '+ LOC.LOCATION + CHAR(10) + CHAR(13) +'Diverted to ' + PRD_LOC.LOCATION AS ACT,IPR.TIME_STAMP
			FROM ITEM_PROCEEDED AS IPR,ITEM_TRACKING ITI,LOCATIONS ITILOC, LOCATIONS LOC, LOCATIONS PRD_LOC, GET_RPT_EDS_LINE_DEVICE() ELD, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
			WHERE IPR.GID=G2L.GID AND IPR.LOCATION=LOC.LOCATION_ID AND IPR.PROCEED_LOCATION=PRD_LOC.LOCATION_ID
				AND IPR.GID=ITI.GID AND ITI.LOCATION=ITILOC.LOCATION_ID AND ITILOC.LOCATION=ELD.POST_XM_LOCATION
				AND LOC.LOCATION LIKE 'OSR1-12%'
				AND IPR.TIME_STAMP BETWEEN @DTFrom AND @DTTo
				AND ITI.TIME_STAMP BETWEEN DATEADD(HOUR,-@HOURRANGE,@DTFrom) AND DATEADD(HOUR,@HOURRANGE,@DTTo)
		  ) AS ALLIPR,#CTP_GID2LPMAP_TEMP G2L2
	WHERE ALLIPR.GID=G2L2.GID

	--SELECT	G2L.LICENSE_PLATE AS LICENSE_PLATE, 
	--		--LOC.SUBSYSTEM AS SUBSYSTEM,
	--		(
	--			SELECT TOP 1 XRAY_ID FROM GET_RPT_EDS_LINE_DEVICE() ELD,ITEM_TRACKING ITI,LOCATIONS LOC
	--			WHERE ITI.TIME_STAMP BETWEEN DATEADD(HOUR,-@HOURRANGE,@DTFrom) AND DATEADD(HOUR,@HOURRANGE,@DTTo) 
	--			AND IPR.GID=ITI.GID
	--			AND ITI.LOCATION=LOC.LOCATION_ID
	--			AND LOC.LOCATION=ELD.PRE_XM_LOCATION
	--		) AS XRAY_ID,
	--		'At Divert Point: '+ LOC.LOCATION + CHAR(10) + CHAR(13) +'Diverted to ' + PRD_LOC.LOCATION  AS ACT, 
	--		IPR.TIME_STAMP, 
	--		(	SELECT TOP 1 
	--				CASE 
	--					WHEN (IPR.TIME_STAMP < ICR.TIME_STAMP) OR (ICR_TYPE.DESCRIPTION) IS NULL 
	--						THEN '-' 
	--					ELSE 
	--						(/*'Screen Level ' + ICR.SCREEN_LEVEL + CHAR(10) + CHAR(13) +*/ ICR_TYPE.DESCRIPTION)
	--				END
	--			FROM ITEM_SCREENED AS ICR 
	--			INNER JOIN ITEM_SCREEN_RESULT_TYPES AS ICR_TYPE ON ICR.RESULT_TYPE = ICR_TYPE.TYPE
	--			WHERE (ICR.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (ICR.GID = IPR.GID)
	--			ORDER BY ICR.TIME_STAMP
	--		) AS XRAY_STAT
	--FROM ITEM_PROCEEDED AS IPR , LOCATIONS LOC, LOCATIONS PRD_LOC, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
	--WHERE IPR.TIME_STAMP BETWEEN @DTFrom AND @DTTo 
	--	AND IPR.LOCATION=LOC.LOCATION_ID
	--	AND IPR.GID=G2L.GID
	--	AND IPR.PROCEED_LOCATION=PRD_LOC.LOCATION_ID
	--	AND	(	
	--			EXISTS(
	--						SELECT DIVERT_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() ELD
	--						WHERE ELD.REJECT_LOCATION=LOC.LOCATION AND ELD.REJECT_LOCATION_TO=PRD_LOC.LOCATION
	--						UNION
	--						SELECT DIVERT_LOCATION FROM GET_RPT_EDS_LINE_DEVICE() ELD
	--						WHERE ELD.CLEAR_LOCATION=LOC.LOCATION AND ELD.CLEAR_LOCATION_TO=PRD_LOC.LOCATION
	--				   )
	--			--OR LOC.LOCATION IN ('OSR1-12T','OSR1-12B')
	--			OR LOC.LOCATION LIKE 'OSR1-12%'
	--		)
	
	
	--/**Before divert point**/
	--UNION ALL	
	--SELECT	G2L.LICENSE_PLATE AS LICENSE_PLATE, 
	--		(SELECT XRAY_ID FROM GET_RPT_EDS_LINE_DEVICE() WHERE SUBSYSTEM = LOC.SUBSYSTEM) AS XRAY_ID,
	--		'Prior to Divert Point at' + ' '+ ITI.LOCATION AS ACT, ITI.TIME_STAMP,
	--		(	SELECT TOP 1 
	--				CASE 
	--					WHEN (ITI.TIME_STAMP < ICR.TIME_STAMP)OR (ICR_TYPE.DESCRIPTION) IS NULL 
	--						THEN '-'	 
	--					ELSE 
	--						('Screen Level ' + ICR.SCREEN_LEVEL + ':' + ICR_TYPE.DESCRIPTION) 
	--				END 
	--			 FROM ITEM_SCREENED AS ICR WITH(NOLOCK)
	--			 INNER JOIN ITEM_SCREEN_RESULT_TYPES AS ICR_TYPE ON ICR.RESULT_TYPE = ICR_TYPE.TYPE
	--			 WHERE (ICR.TIME_STAMP BETWEEN @DTFrom AND @DTTo)AND(ITI.GID = ICR.GID)
	--			 ORDER BY ICR.TIME_STAMP
	--		) AS XRAY_STAT
	--FROM ITEM_TRACKING AS ITI , LOCATIONS LOC, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
	--WHERE ITI.TIME_STAMP BETWEEN @DTFrom AND @DTTo
	--	AND ITI.LOCATION=LOC.LOCATION_ID
	--	AND ITI.GID=G2L.GID
	--	AND LOC.LOCATION IN ('SS1-12','SS2-12','SS3-12','SS4-12','AL1-08A')
	
	
	/**Lost Track**/
	UNION ALL	
	SELECT	G2L.LICENSE_PLATE AS LICENSE_PLATE, 
			--LOC.SUBSYSTEM AS SUBSYSTEM,
			(
				SELECT TOP 1 XRAY_ID FROM GET_RPT_EDS_LINE_DEVICE() ELD,ITEM_TRACKING ITI,LOCATIONS LOC
				WHERE ITI.TIME_STAMP BETWEEN DATEADD(HOUR,-@HOURRANGE,@DTFrom) AND DATEADD(HOUR,@HOURRANGE,@DTTo) 
				AND ILT.GID=ITI.GID
				AND ITI.LOCATION=LOC.LOCATION_ID
				AND LOC.LOCATION=ELD.PRE_XM_LOCATION
			) AS XRAY_ID,
			'Lost tracking at '+ LOC.LOCATION as ACT,
			ILT.TIME_STAMP, '-' AS STAT		
	FROM ITEM_LOST AS ILT, LOCATIONS LOC, #CTP_GID2LPMAP_TEMP G2L WITH(NOLOCK)
	WHERE ILT.TIME_STAMP BETWEEN @DTFrom AND @DTTo 
		AND ILT.LOCATION=LOC.LOCATION_ID
		AND ILT.GID=G2L.GID
		AND (LOC.LOCATION LIKE 'SS%' OR LOC.LOCATION LIKE 'OSR%')	
	ORDER BY TIME_STAMP,LICENSE_PLATE,XRAY_ID;
		
END

--DECLARE @DTFrom [datetime]='3/18/2014 ';
--DECLARE @DTTo [datetime]='3/20/2014 ';
--EXEC stp_RPT_OKC_CRITICALTRACKINGPEC @DTFrom,@DTTo;